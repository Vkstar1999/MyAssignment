// Generated by Dagger (https://dagger.dev).
package com.example.assignment.di;

import com.example.assignment.domain.MyRepository;
import com.example.assignment.networks.ApiService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class AppModule_ProvideMyRepositoryFactory implements Factory<MyRepository> {
  private final Provider<ApiService> apiProvider;

  public AppModule_ProvideMyRepositoryFactory(Provider<ApiService> apiProvider) {
    this.apiProvider = apiProvider;
  }

  @Override
  public MyRepository get() {
    return provideMyRepository(apiProvider.get());
  }

  public static AppModule_ProvideMyRepositoryFactory create(Provider<ApiService> apiProvider) {
    return new AppModule_ProvideMyRepositoryFactory(apiProvider);
  }

  public static MyRepository provideMyRepository(ApiService api) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideMyRepository(api));
  }
}
